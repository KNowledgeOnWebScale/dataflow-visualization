{
  "type": "array",
  "title": "Array of nodes",
  "$id": "nodeSchema",
  "items": {
    "type": "object",
    "title": "Node",
    "required": [],
    "properties": {
      "height": {
        "type": "number",
        "description": "The height of the node.",
        "default": 50,
        "errorMessage": {
          "type": "height must be number"
        }
      },
      "width": {
        "type": "number",
        "description": "The width of the node.",
        "default": 50,
        "errorMessage": {
          "type": "width must be number"
        }
      },
      "fill": {
        "type": "string",
        "description": "Color of the node.",
        "default": "white",
        "errorMessage": {
          "type": "fill must be string"
        }
      },
      "fontsize": {
        "type": "number",
        "description": "Size of the text inside the nodes.",
        "default": 12,
        "errorMessage": {
          "type": "fontsize must be number"
        }
      },
      "id": {
        "type": "string",
        "description": "Used to refer to the node. Used by e.g. an edge to connect two nodes or used by children to specify its parent node.",
        "errorMessage": {
          "type": "id must be string"
        }
      },
      "image": {
        "type": "string",
        "description": "The image inside a node. This image takes up the entire width and height of the node.",
        "errorMessage": {
          "type": "image must be string"
        }
      },
      "label": {
        "type": "string",
        "description": "The text inside a node. If you want a newline in your text, you should manually put '\\n' in your string. If the label does not fit the node in which it appears, `fontsize` will be made smaller so label fits its node (the minimum value to which `fontsize` will be reduced, is the defined `fontsize` divided by two).",
        "default": "",
        "errorMessage": {
          "type": "label must be string"
        }
      },
      "parentNode": {
        "type": "string",
        "description": "The parent of other nodes. If you want to add a node inside another node, you have to set `parentNode` in the child as the ID of the parent.",
        "errorMessage": {
          "type": "parentNode must be string"
        }
      },
      "preset": {
        "type": [
          "array",
          "string"
        ],
        "description": "Refer to a preset defined in the config of the global defaults. If you haven't used a key in your config (but that key is used in your preset), the key from the preset is taken as a key in your individual config. You can refer to multiple presets: the first preset has priority on the second, the second on the third, ... In general, the priority of the keys is: local > first preset > second preset > ... > keys in global default.",
        "errorMessage": {
          "type": "preset must be array or string"
        }
      },
      "shape": {
        "type": "string",
        "enum": [
          "icon",
          "8-star",
          "big-star",
          "circle",
          "cylinder",
          "diamond",
          "ellipse",
          "hexagon",
          "note",
          "rectangle",
          "square",
          "star",
          "triangle",
          "comunica",
          "rmlio",
          "solid",
          "Details"
        ],
        "description": "The shape of the node.",
        "default": "square",
        "errorMessage": {
          "type": "shape must be string with possible values: icon , 8-star , big-star , circle , cylinder , diamond , ellipse , hexagon , note , rectangle , square , star , triangle , comunica , rmlio , solid  or Details"
        }
      },
      "iconName": {
        "type": "string",
        "description": "When 'shape' is set to 'icon', you can set 'iconName' to anything you find in [react-icons](https://react-icons.github.io/react-icons/). Since this is a third-party library, not all styling will work. Only `fill`, `strokeWidth`, `width` and `height` will have effect.",
        "errorMessage": {
          "type": "iconName must be string"
        }
      },
      "stroke": {
        "type": "string",
        "description": "The color of the stroke of the node.",
        "default": "black",
        "errorMessage": {
          "type": "stroke must be string"
        }
      },
      "strokeDasharray": {
        "type": [
          "number",
          "string"
        ],
        "examples": [
          "solid",
          "dashed",
          "dotted",
          "varied",
          "dashed-wide-gaps"
        ],
        "description": "The dash pattern of the node. See [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray#example) for more information. The default value `solid` will fall back to the CSS value `0`, `dashed` to `6 4, `dotted` to `1 3`, `varied` to `5 2 1 2` and dashed-wide-gaps will fall back to `4 8`.",
        "default": "solid",
        "errorMessage": {
          "type": "strokeDasharray must be number or string"
        }
      },
      "strokeWidth": {
        "type": "number",
        "description": "The thickness of the stroke of the nodes.",
        "default": 1,
        "errorMessage": {
          "type": "strokeWidth must be number"
        }
      },
      "title": {
        "type": "string",
        "description": "The title of a node. E.g. useful to name a parentNode. Notice that this is not the same as an ID. If you give a node a title, that title will show up not in the middle of the node, but at the top. If the title does not fit the node in which it appears, `fontsize` will be made smaller to fit the node (the minimum value to which `fontsize` will be reduced, is the defined `fontsize` divided by two).",
        "errorMessage": {
          "type": "title must be string"
        }
      },
      "topText": {
        "type": "string",
        "description": "Set on top of the node.",
        "errorMessage": {
          "type": "topText must be string"
        }
      },
      "zIndex": {
        "type": "number",
        "description": "Controls the stacking order of the nodes.",
        "default": 0,
        "errorMessage": {
          "type": "zIndex must be number"
        }
      },
      "hgroup": {
        "type": "string",
        "description": "Align a group of nodes vertically.",
        "errorMessage": {
          "type": "hgroup must be string"
        }
      },
      "vgroup": {
        "type": "string",
        "description": "Align a group of nodes horizontally.",
        "errorMessage": {
          "type": "vgroup must be string"
        }
      },
      "position": {
        "type": "object",
        "title": "Position schema",
        "$id": "positionSchema",
        "properties": {
          "x": {
            "type": "number",
            "errorMessage": "object.x must be number"
          },
          "y": {
            "type": [
              "number"
            ],
            "errorMessage": "object.y must be number"
          }
        }
      }
    },
    "errorMessage": {
      "type": "Each node should be an object",
      "properties": {}
    }
  },
  "errorMessage": {
    "type": "Nodes are expected to be objects in an array"
  }
}